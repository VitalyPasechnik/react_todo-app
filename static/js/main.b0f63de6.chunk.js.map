{"version":3,"sources":["context.jsx","components/TodoApp.jsx","components/TodoItem.jsx","components/TodoList.jsx","components/TodosFilter.jsx","App.jsx","index.js"],"names":["Context","React","createContext","TodoApp","createNewTodo","useState","query","setQuery","className","onSubmit","e","preventDefault","length","type","placeholder","value","onChange","target","TodoItem","id","title","completed","changeState","destroyTodo","changeTitle","editing","setEdit","editTodo","classNames","onClick","checked","htmlFor","onDoubleClick","onKeyDown","key","TodoList","items","toggleAll","toggleAlls","setToggleAlls","bool","map","todo","newTitle","destroyId","TodosFilter","chooseFilter","select","setSelect","href","selected","App","todos","setTodos","filterTodos","setFilterTodos","todosCounter","setTodosCounter","filter","some","x","Date","useEffect","item","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0f63de6.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Context = React.createContext();\n\n// export const Provider = ({ children }) => {\n//   const [todos, setTodos] = useState([]);\n// const [todosCounter, setTodosCounter] = useState(0);\n// const [toggleAlls, setToggleAlls] = useState(false);\n\n//   const [filterTodos, setFilterTodos] = useState([...todos]);\n\n//   useEffect(() => {\n//     setFilterTodos(todos);\n//   });\n\n//   useEffect(() => {\n//     setFilterTodos(todos);\n//     setTodosCounter(todos.filter(item => item.completed === false).length);\n//   }, [todos]);\n\n//   const chooseFilter = useCallback((type) => {\n//     switch (type) {\n//       case 'All':\n//         setFilterTodos(todos);\n//         break;\n//       case 'Active':\n//         setFilterTodos(todos.filter(todo => !todo.completed));\n//         break;\n//       case 'Completed':\n//         setFilterTodos(todos.filter(todo => todo.completed));\n//         break;\n//       default:\n//         break;\n//     }\n//   }, []);\n\n//   const createNewTodo = useCallback((title) => {\n//     if (!todos.some(x => x.title === title)) {\n//       setTodos([...todos, {\n//         id: +new Date(),\n//         title,\n//         completed: false,\n//       }]);\n//     }\n//   }, []);\n\n//   const toggleAll = useCallback(() => {\n//     setToggleAlls(!toggleAlls);\n//     setTodos(todos.map(todo => ({ ...todo, completed: toggleAlls })));\n//   }, []);\n\n//   const changeState = useCallback((bool, id) => {\n//     setTodos(todos.map((todo) => {\n//       if (todo.id === id) {\n//         return ({ ...todo, completed: bool });\n//       }\n\n//       return todo;\n//     }));\n//   }, []);\n\n//   const destroyTodo = useCallback((destroyId) => {\n//     setTodos(todos.filter(todo => todo.id !== destroyId));\n//   }, []);\n\n//   const changeTitle = useCallback((newTitle, id) => {\n//     setTodos(todos.map((todo) => {\n//       if (todo.id === id) {\n//         return ({ ...todo, title: newTitle });\n//       }\n\n//       return todo;\n//     }));\n//   }, []);\n\n//   return (\n//     <Context.Provider\n//       value={{\n//         todos,\n//         setTodos,\n//         todosCounter,\n//         setTodosCounter,\n//         toggleAlls,\n//         setToggleAlls,\n//         filterTodos,\n//         setFilterTodos,\n//         createNewTodo,\n//         toggleAll,\n//         chooseFilter,\n//         changeState,\n//         destroyTodo,\n//         changeTitle,\n//       }}\n//     >\n//       {children}\n//     </Context.Provider>\n//   );\n// };\n","import React, { useState } from 'react';\n\nexport const TodoApp = ({ createNewTodo }) => {\n  const [query, setQuery] = useState('');\n  // const [query, setQuery] = useContext(Context);\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n\n      <form onSubmit={(e) => {\n        e.preventDefault();\n        if (query.length > 0) {\n          createNewTodo(query);\n          setQuery('');\n        }\n      }}\n      >\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          data-cy=\"createTodo\"\n          placeholder=\"What needs to be done?\"\n          value={query}\n          onChange={e => setQuery(e.target.value)}\n        />\n      </form>\n    </header>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames/bind';\n\nexport const TodoItem = ({\n  id,\n  title,\n  completed,\n  changeState,\n  destroyTodo,\n  changeTitle,\n}) => {\n  const [editing, setEdit] = useState(false);\n  const [query, setQuery] = useState(title);\n\n  const editTodo = () => {\n    setEdit(!editing);\n  };\n\n  return (\n    <>\n      <li className={classNames({ completed }, { editing })}>\n        {completed ? (\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              className=\"toggle\"\n              id=\"toggle-completed\"\n              onClick={e => changeState(e.target.checked, id)}\n            />\n            <label\n              htmlFor=\"toggle-completed\"\n              onDoubleClick={editTodo}\n            >\n              {title}\n            </label>\n            <button\n              type=\"button\"\n              className=\"destroy\"\n              onClick={() => destroyTodo(id)}\n            />\n          </div>\n        ) : (\n          <>\n            <div className=\"view\">\n              <input\n                type=\"checkbox\"\n                className=\"toggle\"\n                id=\"toggle-view\"\n                onChange={e => changeState(e.target.checked, id)}\n              />\n              <label\n                htmlFor=\"toggle-view\"\n                onDoubleClick={() => editTodo(!editing)}\n              >\n                { title }\n              </label>\n              <button\n                type=\"button\"\n                className=\"destroy\"\n                onClick={() => destroyTodo(id)}\n              />\n            </div>\n            <input\n              type=\"text\"\n              className=\"edit\"\n              id=\"editTodo\"\n              value={query}\n              onChange={e => setQuery(e.target.value)}\n              onKeyDown={(e) => {\n                switch (e.key) {\n                  case 'Enter':\n                    e.preventDefault();\n                    changeTitle(query, id);\n                    setEdit(!editing);\n                    break;\n                  case 'Escape':\n                    setEdit(!editing);\n                    break;\n                  case 'Mousedown':\n                    setEdit(!editing);\n                    break;\n                  default:\n                    break;\n                }\n              }}\n            />\n          </>\n        )}\n      </li>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({\n  items,\n  changeState,\n  toggleAll,\n  destroyTodo,\n  changeTitle,\n}) => {\n  const [toggleAlls, setToggleAlls] = useState(false);\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        data-cy=\"toggleAll\"\n        className=\"toggle-all\"\n        onChange={(bool) => {\n          setToggleAlls(!toggleAlls);\n          toggleAll(toggleAlls);\n        }}\n      />\n      <label htmlFor=\"toggle-all\">\n        Mark all as complete\n      </label>\n\n      <ul\n        className=\"todo-list\"\n        data-cy=\"todoList\"\n      >\n        {items.map(todo => (\n          <TodoItem\n            key={todo.id}\n            changeState={(bool, id) => changeState(bool, id)}\n            changeTitle={(newTitle, id) => changeTitle(newTitle, id)}\n            id={todo.id}\n            title={todo.title}\n            destroyTodo={destroyId => destroyTodo(destroyId)}\n            completed={todo.completed}\n          />\n        ))}\n      </ul>\n    </section>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames/bind';\n\nexport const TodosFilter = ({ chooseFilter }) => {\n  const [select, setSelect] = useState('All');\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={classNames({ selected: select === 'All' })}\n          onClick={() => {\n            chooseFilter('All');\n            setSelect('All');\n          }}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={classNames({ selected: select === 'Active' })}\n          onClick={() => {\n            chooseFilter('Active');\n            setSelect('Active');\n          }}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={classNames({ selected: select === 'Completed' })}\n          onClick={() => {\n            chooseFilter('Completed');\n            setSelect('Completed');\n          }}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Context } from './context';\nimport { TodoApp } from './components/TodoApp';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\n\nexport const App = () => {\n  const [todos, setTodos] = useState([]);\n  const [filterTodos, setFilterTodos] = useState(todos);\n  const [toggleAlls, setToggleAlls] = useState(false);\n\n  // const { todos, setTodos } = useContext(Context);\n  // const { filterTodos, setFilterTodos } = useContext(Context);\n  const [todosCounter, setTodosCounter] = useState(0);\n\n  const chooseFilter = (type) => {\n    switch (type) {\n      case 'All':\n        setFilterTodos(todos);\n        break;\n      case 'Active':\n        setFilterTodos(todos.filter(todo => !todo.completed));\n        break;\n      case 'Completed':\n        setFilterTodos(todos.filter(todo => todo.completed));\n        break;\n      default:\n        break;\n    }\n  };\n\n  const createNewTodo = (title) => {\n    if (!todos.some(x => x.title === title)) {\n      setTodos([...todos, {\n        id: +new Date(),\n        title,\n        completed: false,\n      }]);\n    }\n  };\n\n  const toggleAll = (bool) => {\n    setTodos(todos.map(todo => ({ ...todo, completed: bool })));\n  };\n\n  const changeState = (bool, id) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === id) {\n        return ({ ...todo, completed: bool });\n      }\n\n      return todo;\n    }));\n  };\n\n  const destroyTodo = (destroyId) => {\n    setTodos(todos.filter(todo => todo.id !== destroyId));\n  };\n\n  const changeTitle = (newTitle, id) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === id) {\n        return ({ ...todo, title: newTitle });\n      }\n\n      return todo;\n    }));\n  };\n\n  useEffect(() => {\n    setFilterTodos(todos);\n    setTodosCounter(todos.filter(item => item.completed === false).length);\n  }, [todos]);\n\n  return (\n    <Context.Provider value={{\n      todos,\n      setTodos,\n      todosCounter,\n      setTodosCounter,\n      toggleAlls,\n      setToggleAlls,\n      filterTodos,\n      setFilterTodos,\n      createNewTodo,\n      toggleAll,\n      chooseFilter,\n      changeState,\n      destroyTodo,\n      changeTitle,\n    }}\n    >\n      <section className=\"todoapp\">\n\n        <TodoApp createNewTodo={title => createNewTodo(title)} />\n\n        {filterTodos.length > 0 && (\n          <>\n            <TodoList\n              items={todos}\n              toggleAll={bool => toggleAll(bool)}\n              changeState={(bool, id) => changeState(bool, id)}\n              destroyTodo={destroyId => destroyTodo(destroyId)}\n              changeTitle={(newTitle, id) => changeTitle(newTitle, id)}\n\n            />\n\n            <footer className=\"footer\">\n              <span\n                className=\"todo-count\"\n                data-cy=\"todosCounter\"\n              >\n                {todosCounter}\n                {' '}\n                items left\n              </span>\n\n              <TodosFilter chooseFilter={type => chooseFilter(type)} />\n\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={() => setTodos(todos.filter(todo => !todo.completed))}\n              >\n                Clear completed\n              </button>\n            </footer>\n          </>\n        )}\n      </section>\n    </Context.Provider>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}